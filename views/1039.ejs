<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 1039: Minimum Score Triangulation of Polygon (C++)
    </title>
    <link rel="stylesheet" href="/styles.min.css" />
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 1039: Minimum Score Triangulation of Polygon (C++)</h1>

        <div class="problem-description">
            <p><strong>Problem:</strong>
                You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the ith vertex in clockwise order. You will triangulate the polygon into n - 2 triangles. For each triangle, the value is the product of the values of its vertices, and the total score is the sum of these values over all triangles. Return the smallest possible total score.
            </p>
            <p><strong>Example:</strong>
                Input: values = [1,2,3]<br>
                Output: 6<br>
                Explanation: The polygon is a triangle, so the score is 1 * 2 * 3 = 6.
            </p>
        </div>

        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    int minScoreTriangulation(vector&lt;int&gt;&amp; values) {
        int n = values.size();
        
        // dp[i][j] represents minimum score to triangulate polygon from vertex i to j
        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n, 0));
        
        // Length of the chain we're considering
        for (int len = 3; len &lt;= n; len++) {
            for (int i = 0; i &lt;= n - len; i++) {
                int j = i + len - 1;
                dp[i][j] = INT_MAX;
                
                // Try all possible middle vertices k to form triangle (i, k, j)
                for (int k = i + 1; k &lt; j; k++) {
                    // Cost = triangulate left part + current triangle + triangulate right part
                    int cost = dp[i][k] + values[i] * values[k] * values[j] + dp[k][j];
                    dp[i][j] = min(dp[i][j], cost);
                }
            }
        }
        
        // Return minimum score for entire polygon (vertex 0 to n-1)
        return dp[0][n - 1];
    }
};</code></pre>
        </div>

        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>