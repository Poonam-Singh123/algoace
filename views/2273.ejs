<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 2273: Find Resultant Array After Removing Anagrams (C++)
    </title>
    <link rel="stylesheet" href="/styles.min.css" />
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 2273: Find Resultant Array After Removing Anagrams (C++)</h1>

        <div class="problem-description">
            <p><strong>Problem:</strong>
                You are given a 0-indexed string array words, where words[i] consists of lowercase English letters. In one operation, select any index i such that 0 &lt; i &lt; words.length and words[i - 1] and words[i] are anagrams, and delete words[i] from words. Keep performing this operation as long as you can select an index that satisfies the conditions. Return words after performing all operations. An anagram is a word formed by rearranging the letters of a different word using all the original letters exactly once.
            </p>
            <p><strong>Example:</strong>
                Input: words = ["abba","baba","bbaa","cd","cd"]<br>
                Output: ["abba","cd"]<br>
                Explanation: Remove "baba" (anagram of "abba"), then remove "bbaa" (anagram of "abba"), then remove second "cd" (anagram of first "cd"). Result: ["abba","cd"].
            </p>
        </div>

        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    vector&lt;string&gt; removeAnagrams(vector&lt;string&gt;&amp; words) {
        vector&lt;string&gt; result;
        if (words.empty()) {
            return result;
        }
        
        // Add first word to result
        result.push_back(words[0]);
        
        // Store previous word's sorted form for comparison
        string prev = words[0];
        sort(prev.begin(), prev.end());
        
        // Process remaining words
        for (int i = 1; i &lt; words.size(); i++) {
            // Sort current word to check if it's an anagram
            string curr = words[i];
            sort(curr.begin(), curr.end());
            
            // If not an anagram of previous word, add to result
            if (curr != prev) {
                result.push_back(words[i]);
                prev = curr;
            }
            // If it is an anagram, skip it (implicitly removed)
        }
        
        return result;
    }
};</code></pre>
        </div>

        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>