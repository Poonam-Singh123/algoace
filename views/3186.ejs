<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 3186: Maximum Total Damage With Spell Casting (C++)
    </title>
    <link rel="stylesheet" href="/styles.min.css" />
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 3186: Maximum Total Damage With Spell Casting (C++)</h1>

        <div class="problem-description">
            <p><strong>Problem:</strong>
                A magician has various spells. You are given an array power, where each element represents the damage of a spell. Multiple spells can have the same damage value. If a magician decides to cast a spell with a damage of power[i], they cannot cast any spell with a damage of power[i] - 2, power[i] - 1, power[i] + 1, or power[i] + 2. Each spell can be cast only once. Return the maximum possible total damage that a magician can cast.
            </p>
            <p><strong>Example:</strong>
                Input: power = [1,1,3,4]<br>
                Output: 6<br>
                Explanation: Cast spells with damage 1 twice (total 2) and spell with damage 4 (total 4). Cannot cast 3 because it's adjacent to 4. Maximum damage = 1 + 1 + 4 = 6.
            </p>
        </div>

        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    long long maximumTotalDamage(vector&lt;int&gt;&amp; power) {
        // Count frequency of each damage value
        unordered_map&lt;int, int&gt; count;
        for (int damage : power) {
            count[damage]++;
        }
        
        // Get sorted unique damage values
        vector&lt;int&gt; uniqueDamages;
        for (auto&amp; [damage, freq] : count) {
            uniqueDamages.push_back(damage);
        }
        sort(uniqueDamages.begin(), uniqueDamages.end());
        
        int n = uniqueDamages.size();
        if (n == 0) return 0;
        
        // dp[i][0] = max damage not using i-th unique damage
        // dp[i][1] = max damage using i-th unique damage
        vector&lt;vector&lt;long long&gt;&gt; dp(n, vector&lt;long long&gt;(2, 0));
        
        for (int i = 0; i &lt; n; i++) {
            int damage = uniqueDamages[i];
            long long currentDamage = (long long)damage * count[damage];
            
            if (i == 0) {
                dp[0][0] = 0;
                dp[0][1] = currentDamage;
                continue;
            }
            
            // Not using current damage
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1]);
            
            // Using current damage
            dp[i][1] = currentDamage;
            
            // Check if we can combine with previous states
            // Cannot use damages within range [damage-2, damage+2]
            if (i &gt;= 1 &amp;&amp; uniqueDamages[i - 1] != damage - 1 &amp;&amp; 
                uniqueDamages[i - 1] != damage - 2) {
                // Previous damage is safe to combine
                dp[i][1] += max(dp[i - 1][0], dp[i - 1][1]);
            } else if (i &gt;= 2 &amp;&amp; uniqueDamages[i - 2] != damage - 2) {
                // Skip one and use i-2
                dp[i][1] += max(dp[i - 2][0], dp[i - 2][1]);
            } else if (i &gt;= 3) {
                // Skip two and use i-3
                dp[i][1] += max(dp[i - 3][0], dp[i - 3][1]);
            }
        }
        
        return max(dp[n - 1][0], dp[n - 1][1]);
    }
};</code></pre>
        </div>

        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>