<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 3346: Maximum Frequency of an Element After Performing Operations I (C++)
    </title>
    <link rel="stylesheet" href="/styles.min.css" />
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 3346: Maximum Frequency of an Element After Performing Operations I (C++)</h1>

        <div class="problem-description">
            <p><strong>Problem:</strong>
                You are given an integer array nums and two integers k and numOperations. You must perform an operation numOperations times on nums, where in each operation you: Select an index i that was not selected in any previous operations. Add an integer in the range [-k, k] to nums[i]. Return the maximum possible frequency of any element in nums after performing the operations.
            </p>
            <p><strong>Example:</strong>
                Input: nums = [1,4,5], k = 1, numOperations = 2<br>
                Output: 2<br>
                Explanation: Add 0 to nums[1] to get [1,4,5]. Add -1 to nums[2] to get [1,4,4]. Frequency of 4 is 2.
            </p>
        </div>

        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    int maxFrequency(vector&lt;int&gt;&amp; nums, int k, int numOperations) {
        // Count frequency of each number
        unordered_map&lt;int, int&gt; cnt;
        
        // Difference array to track range contributions
        map&lt;int, int&gt; diff;
        
        for (int x : nums) {
            cnt[x]++;
            
            // Mark current value
            diff[x] += 0;
            
            // Each number can be transformed to range [x-k, x+k]
            // Use difference array: increment at start, decrement at end+1
            diff[x - k]++;
            diff[x + k + 1]--;
        }
        
        int ans = 0;
        int sum = 0;
        
        // Process all potential target values in sorted order
        for (const auto&amp; [x, delta] : diff) {
            sum += delta;
            
            // For target value x:
            // - cnt[x] elements already equal to x (no operation needed)
            // - (sum - cnt[x]) elements can be changed to x (within range)
            // - We can perform at most numOperations operations
            // So max frequency = min(sum, cnt[x] + numOperations)
            ans = max(ans, min(sum, cnt[x] + numOperations));
        }
        
        return ans;
    }
};</code></pre>
        </div>

        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>