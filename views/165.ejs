<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 165: Compare Version Numbers (C++)
    </title>
    <link rel="stylesheet" href="/styles.min.css" />
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 165: Compare Version Numbers (C++)</h1>

        <div class="problem-description">
            <p><strong>Problem:</strong>
                Given two version strings, version1 and version2, compare them. A version string consists of revisions separated by dots '.'. The value of the revision is its integer conversion ignoring leading zeros. To compare version strings, compare their revision values in left-to-right order. If one of the version strings has fewer revisions, treat the missing revision values as 0. Return -1 if version1 &lt; version2, 1 if version1 &gt; version2, and 0 if they are equal.
            </p>
            <p><strong>Example:</strong>
                Input: version1 = "1.2", version2 = "1.10"<br>
                Output: -1<br>
                Explanation: version1's second revision is 2 and version2's second revision is 10: 2 &lt; 10, so version1 &lt; version2.
            </p>
        </div>

        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    int compareVersion(string version1, string version2) {
        int i = 0, j = 0;
        int n1 = version1.length(), n2 = version2.length();
        
        while (i &lt; n1 || j &lt; n2) {
            int num1 = 0, num2 = 0;
            
            // Extract next revision number from version1
            while (i &lt; n1 &amp;&amp; version1[i] != '.') {
                num1 = num1 * 10 + (version1[i] - '0');
                i++;
            }
            i++; // Skip the dot
            
            // Extract next revision number from version2
            while (j &lt; n2 &amp;&amp; version2[j] != '.') {
                num2 = num2 * 10 + (version2[j] - '0');
                j++;
            }
            j++; // Skip the dot
            
            // Compare current revision numbers
            if (num1 &lt; num2) {
                return -1;
            } else if (num1 &gt; num2) {
                return 1;
            }
            
            // If equal, continue to next revision
        }
        
        return 0; // All revisions are equal
    }
};</code></pre>
        </div>

        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>