<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 407: Trapping Rain Water II (C++)
    </title>
    <link rel="stylesheet" href="/styles.min.css" />
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 407: Trapping Rain Water II (C++)</h1>

        <div class="problem-description">
            <p><strong>Problem:</strong>
                Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining. Water can be trapped between blocks if surrounded by higher blocks on all sides.
            </p>
            <p><strong>Example:</strong>
                Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]<br>
                Output: 4<br>
                Explanation: After the rain, water is trapped between the blocks. The total volume of water trapped is 4.
            </p>
        </div>

        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    int trapRainWater(vector&lt;vector&lt;int&gt;&gt;&amp; heightMap) {
        if (heightMap.empty() || heightMap[0].empty()) {
            return 0;
        }
        
        int m = heightMap.size();
        int n = heightMap[0].size();
        
        // Priority queue to store cells by height (min-heap)
        // Format: {height, row, col}
        priority_queue&lt;vector&lt;int&gt;, vector&lt;vector&lt;int&gt;&gt;, greater&lt;vector&lt;int&gt;&gt;&gt; pq;
        
        // Track visited cells
        vector&lt;vector&lt;bool&gt;&gt; visited(m, vector&lt;bool&gt;(n, false));
        
        // Add all boundary cells to priority queue
        for (int i = 0; i &lt; m; i++) {
            for (int j = 0; j &lt; n; j++) {
                if (i == 0 || i == m - 1 || j == 0 || j == n - 1) {
                    pq.push({heightMap[i][j], i, j});
                    visited[i][j] = true;
                }
            }
        }
        
        int waterTrapped = 0;
        int maxHeight = 0;
        
        // Directions: up, down, left, right
        int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        // Process cells from lowest to highest (expanding inward from boundary)
        while (!pq.empty()) {
            auto cell = pq.top();
            pq.pop();
            
            int height = cell[0];
            int row = cell[1];
            int col = cell[2];
            
            // Update the maximum height seen so far (water level)
            maxHeight = max(maxHeight, height);
            
            // Check all 4 neighbors
            for (int i = 0; i &lt; 4; i++) {
                int newRow = row + dirs[i][0];
                int newCol = col + dirs[i][1];
                
                // Skip if out of bounds or already visited
                if (newRow &lt; 0 || newRow &gt;= m || newCol &lt; 0 || newCol &gt;= n || visited[newRow][newCol]) {
                    continue;
                }
                
                // Mark as visited
                visited[newRow][newCol] = true;
                
                // If current max height is higher than neighbor's height, water can be trapped
                if (maxHeight &gt; heightMap[newRow][newCol]) {
                    waterTrapped += maxHeight - heightMap[newRow][newCol];
                }
                
                // Add neighbor to priority queue
                pq.push({heightMap[newRow][newCol], newRow, newCol});
            }
        }
        
        return waterTrapped;
    }
};</code></pre>
        </div>

        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>