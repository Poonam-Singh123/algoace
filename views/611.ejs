<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 611: Valid Triangle Number (C++)
    </title>
    <link rel="stylesheet" href="/styles.min.css" />
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 611: Valid Triangle Number (C++)</h1>

        <div class="problem-description">
            <p><strong>Problem:</strong>
                Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle. For three sides to form a valid triangle, the sum of any two sides must be greater than the third side. This means for sides a, b, c (where a ≤ b ≤ c), we need a + b &gt; c.
            </p>
            <p><strong>Example:</strong>
                Input: nums = [2,2,3,4]<br>
                Output: 3<br>
                Explanation: Valid combinations are: 2,3,4 and 2,2,3 and 2,2,4. Each triplet satisfies the triangle inequality.
            </p>
        </div>

        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    int triangleNumber(vector&lt;int&gt;&amp; nums) {
        int n = nums.size();
        if (n &lt; 3) return 0;
        
        // Sort the array to use two pointers technique
        sort(nums.begin(), nums.end());
        
        int count = 0;
        
        // Fix the largest side (c) and find pairs (a,b) such that a + b &gt; c
        for (int k = n - 1; k &gt;= 2; k--) {
            int left = 0, right = k - 1;
            
            // Use two pointers to find valid pairs
            while (left &lt; right) {
                // Check if current pair can form triangle with nums[k]
                if (nums[left] + nums[right] &gt; nums[k]) {
                    // All pairs from left to right-1 with nums[right] are valid
                    // because array is sorted, so nums[left..right-1] + nums[right] &gt; nums[k]
                    count += (right - left);
                    right--;
                } else {
                    // Sum is too small, move left pointer to increase sum
                    left++;
                }
            }
        }
        
        return count;
    }
};</code></pre>
        </div>

        <a href="/" class="back-link">← Back to Home</a>
    </main>
</body>

</html>