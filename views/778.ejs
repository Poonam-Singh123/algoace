<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 778: Swim in Rising Water (C++)
    </title>
    <link rel="stylesheet" href="/styles.min.css" />
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 778: Swim in Rising Water (C++)</h1>

        <div class="problem-description">
            <p><strong>Problem:</strong>
                You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j). The rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).
            </p>
            <p><strong>Example:</strong>
                Input: grid = [[0,2],[1,3]]<br>
                Output: 3<br>
                Explanation: At time 0, you are at (0,0). You cannot go anywhere until time 3, when you can move to (0,1) and (1,0). At time 3, you can reach (1,1).
            </p>
        </div>

        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    int swimInWater(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {
        int n = grid.size();
        
        // Priority queue to store cells: {max_elevation_so_far, row, col}
        priority_queue&lt;vector&lt;int&gt;, vector&lt;vector&lt;int&gt;&gt;, greater&lt;vector&lt;int&gt;&gt;&gt; pq;
        
        // Start from top-left corner
        pq.push({grid[0][0], 0, 0});
        
        // Track visited cells
        vector&lt;vector&lt;bool&gt;&gt; visited(n, vector&lt;bool&gt;(n, false));
        visited[0][0] = true;
        
        // Directions: up, down, left, right
        int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        // Process cells using modified Dijkstra's algorithm
        while (!pq.empty()) {
            auto cell = pq.top();
            pq.pop();
            
            int maxElevation = cell[0];
            int row = cell[1];
            int col = cell[2];
            
            // If we reached bottom-right corner, return the time
            if (row == n - 1 &amp;&amp; col == n - 1) {
                return maxElevation;
            }
            
            // Explore all 4 neighbors
            for (int i = 0; i &lt; 4; i++) {
                int newRow = row + dirs[i][0];
                int newCol = col + dirs[i][1];
                
                // Skip if out of bounds or already visited
                if (newRow &lt; 0 || newRow &gt;= n || newCol &lt; 0 || newCol &gt;= n || visited[newRow][newCol]) {
                    continue;
                }
                
                // Mark as visited
                visited[newRow][newCol] = true;
                
                // The time needed is the maximum elevation encountered so far
                int newMaxElevation = max(maxElevation, grid[newRow][newCol]);
                
                // Add neighbor to priority queue
                pq.push({newMaxElevation, newRow, newCol});
            }
        }
        
        return -1; // Should never reach here if input is valid
    }
};</code></pre>
        </div>

        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>