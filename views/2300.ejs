<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 2300: Successful Pairs of Spells and Potions (C++)
    </title>
    <link rel="stylesheet" href="/styles.min.css" />
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 2300: Successful Pairs of Spells and Potions (C++)</h1>

        <div class="problem-description">
            <p><strong>Problem:</strong>
                You are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion. You are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success. Return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.
            </p>
            <p><strong>Example:</strong>
                Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7<br>
                Output: [4,0,3]<br>
                Explanation: For spell 5: pairs with potions [2,3,4,5]. For spell 1: no pairs. For spell 3: pairs with potions [3,4,5].
            </p>
        </div>

        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    vector&lt;int&gt; successfulPairs(vector&lt;int&gt;&amp; spells, vector&lt;int&gt;&amp; potions, long long success) {
        int n = spells.size();
        int m = potions.size();
        vector&lt;int&gt; result(n);
        
        // Sort potions array for binary search
        sort(potions.begin(), potions.end());
        
        // For each spell, find how many potions form successful pairs
        for (int i = 0; i &lt; n; i++) {
            long long spell = spells[i];
            
            // Calculate minimum potion strength needed for success
            // We need: spell * potion &gt;= success
            // So: potion &gt;= ceil(success / spell)
            long long minPotion = (success + spell - 1) / spell; // Ceiling division
            
            // Binary search to find first potion &gt;= minPotion
            int left = 0, right = m;
            while (left &lt; right) {
                int mid = left + (right - left) / 2;
                if (potions[mid] &gt;= minPotion) {
                    right = mid;
                } else {
                    left = mid + 1;
                }
            }
            
            // Count of successful potions is from left to end
            result[i] = m - left;
        }
        
        return result;
    }
};</code></pre>
        </div>

        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>