<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 3217: Delete Nodes From Linked List Present in Array (C++)
    </title>
    <link rel="stylesheet" href="/styles.min.css" />
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 3217: Delete Nodes From Linked List Present in Array (C++)</h1>

        <div class="problem-description">
            <p><strong>Problem:</strong>
                You are given an array of integers nums and the head of a linked list. Return the head of the modified linked list after removing all nodes from the linked list that have a value that exists in nums.
            </p>
            <p><strong>Example:</strong>
                Input: nums = [1,2,3], head = [1,2,3,4,5]<br>
                Output: [4,5]<br>
                Explanation: Remove the nodes with values 1, 2, and 3.
            </p>
        </div>

        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* modifiedList(vector&lt;int&gt;&amp; nums, ListNode* head) {
        // Store all values to be removed in a set for O(1) lookup
        unordered_set&lt;int&gt; toRemove(nums.begin(), nums.end());
        
        // Create a dummy node to handle edge cases (like removing head)
        ListNode* dummy = new ListNode(0);
        dummy-&gt;next = head;
        
        // Traverse the list with previous pointer
        ListNode* prev = dummy;
        
        while (prev-&gt;next != nullptr) {
            // If current node's value should be removed
            if (toRemove.count(prev-&gt;next-&gt;val)) {
                // Skip the current node
                ListNode* temp = prev-&gt;next;
                prev-&gt;next = prev-&gt;next-&gt;next;
                delete temp; // Free memory
            } else {
                // Move to next node
                prev = prev-&gt;next;
            }
        }
        
        ListNode* newHead = dummy-&gt;next;
        delete dummy; // Free dummy node
        return newHead;
    }
};</code></pre>
        </div>

        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>