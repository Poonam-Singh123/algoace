<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 1733: Minimum Number of People to Teach
    </title>
    <link rel="stylesheet" href="/styles.min.css" />
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 1733: Minimum Number of People to Teach (C++)</h1>

        <div class="problem-description">
            <p><strong>Problem:</strong>
                On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language. You are given an integer n, an array languages, and an array friendships where:
                - There are n languages numbered 1 through n
                - languages[i] is the set of languages the ith user knows
                - friendships[i] = [ui, vi] denotes a friendship between users ui and vi
                
                You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.
            </p>
            <p><strong>Example:</strong>
                Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]<br>
                Output: 1<br>
                Explanation: You can either teach language 1 to user 2 or teach language 2 to user 1. Either way, all friends can communicate.
            </p>
        </div>

        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    int minimumTeachings(int n, vector<vector<int>>& languages, vector<vector<int>>& friendships) {
        // Convert languages to sets for easier lookup
        vector<unordered_set<int>> langSets(languages.size());
        for (int i = 0; i < languages.size(); i++) {
            for (int lang : languages[i]) {
                langSets[i].insert(lang);
            }
        }
        
        // Find pairs that cannot communicate
        vector<pair<int, int>> cannotCommunicate;
        for (auto& friendship : friendships) {
            int u = friendship[0] - 1; // Convert to 0-indexed
            int v = friendship[1] - 1;
            
            // Check if they have a common language
            bool canCommunicate = false;
            for (int lang : langSets[u]) {
                if (langSets[v].count(lang)) {
                    canCommunicate = true;
                    break;
                }
            }
            
            if (!canCommunicate) {
                cannotCommunicate.push_back({u, v});
            }
        }
        
        if (cannotCommunicate.empty()) {
            return 0; // Everyone can already communicate
        }
        
        int minTeach = INT_MAX;
        
        // Try teaching each language from 1 to n
        for (int lang = 1; lang <= n; lang++) {
            unordered_set<int> needToTeach;
            
            // For each pair that cannot communicate
            for (auto& pair : cannotCommunicate) {
                int u = pair.first;
                int v = pair.second;
                
                // If neither knows the current language, both need to learn it
                // If only one knows it, the other needs to learn it
                if (!langSets[u].count(lang)) {
                    needToTeach.insert(u);
                }
                if (!langSets[v].count(lang)) {
                    needToTeach.insert(v);
                }
            }
            
            minTeach = min(minTeach, (int)needToTeach.size());
        }
        
        return minTeach;
    }
};</code></pre>
        </div>

        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>